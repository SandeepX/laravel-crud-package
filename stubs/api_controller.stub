<?php

namespace App\Http\Controllers\Api;

use App\Models\{{ class }};
use App\Http\Controllers\Controller;
use App\Http\Requests\{{ class }}Request;
use App\Http\Resources\{{ class }}Resource;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Exception;

class {{ class }}Controller extends Controller
{

   /**
    * Display a listing of the resource.
    *
    * @param Request $request
    * @return JsonResponse
    */
    public function index(Request $request): JsonResponse
    {
        try {
            $data = {{ class }}::query()->get();
            return response()->json({{ class }}Resource::collection($data));
        } catch (Exception $e) {
            Log::error("Error fetching {{ class }} records: " . $e->getMessage());
            return response()->json(['message' => $e->getMessage()], $e->getCode());

        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  {{ class }}Request  $request
     * @return JsonResponse
     * @throws Exception
     */
    public function store({{ class }}Request $request): JsonResponse
    {
        try {
            $validatedData = $request->validated();
            $model = {{ class }}::create($validatedData);
            return response()->json(new {{ class }}Resource($model), 201);
        } catch (Exception $e) {
            Log::error("Error creating {{ class }}: " . $e->getMessage());
            return response()->json(['message' => $e->getMessage()], $e->getCode());
        }
    }

    /**
     * Display the specified resource.

     * @param  int  $id
     * @return JsonResponse
     */
    public function show(int $id): JsonResponse
    {
        try {
            $model = {{ class }}::find($id);

            if (!$model) {
                return response()->json(['message' => '{{class}} not found.'], 404);
            }
            return response()->json(new {{ class }}Resource($model));
        } catch (Exception $e) {
            Log::error("Error fetching {{ class }}: " . $e->getMessage());
            return response()->json(['message' => $e->getMessage()], $e->getCode());
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  {{ class }}Request  $request
     * @param  int  $id
     * @return JsonResponse
     * @throws Exception
     */
    public function update({{ class }}Request $request, int $id): JsonResponse
    {
        try {
            $model = {{ class }}::find($id);

            if (!$model) {
                return response()->json(['message' => '{{ class }} not found.'], 404);
            }
            $model->update($request->validated());
            return response()->json(new {{ class }}Resource($model));
        } catch (Exception $e) {
            Log::error("Error updating {{ class }}: " . $e->getMessage());
            return response()->json(['message' => $e->getMessage()], $e->getCode());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     * @return JsonResponse
     * @throws Exception
     */
    public function destroy(int $id): JsonResponse
    {
        try {
            $model = {{ class }}::find($id);

            if (!$model) {
                return response()->json(['message' => '{{ class }} not found.'], 404);
            }
            $model->delete();
            return response()->json(null, 204);
        } catch (Exception $e) {
            Log::error("Error deleting {{ class }}: " . $e->getMessage());
            return response()->json(['message' => $e->getMessage()], $e->getCode());
        }
    }
}
